phantomcss.init({
	
	/*
	captureWaitEnabled defaults to true, setting to false will remove a small wait/delay on each
	screenshot capture - useful when you don't need to worry about
	animations and latency in your visual tests
	*/
	captureWaitEnabled: false,
	
	/*
		libraryRoot is now optional unless you are using SlimerJS where
		you will need to set it to the correct path. It must point to
		your phantomcss folder. If you are using NPM, this will probably
		be './node_modules/phantomcss'.
	*/
	libraryRoot: './node_modules/PhantomCSS',
	
	screenshotRoot: './tests/visual_tests/screenshots',
	
	/*
		By default, failure images are put in the './failures' folder.
		If failedComparisonsRoot is set to false a separate folder will
		not be created but failure images can still be found alongside
		the original and new images.
	*/
	failedComparisonsRoot: './tests/visual_tests/screenshots/failures',
	
	/*
		Remove results directory tree after run.  Use in conjunction
		with failedComparisonsRoot to see failed comparisons.
	*/
	cleanupComparisonImages: true,
	
	/*
		A reference to a particular Casper instance. Required for SlimerJS.
	*/
	// casper: specific_instance_of_casper,
	
	/*
		You might want to keep master/baseline images in a completely
		different folder to the diffs/failures.  Useful when working
		with version control systems. By default this resolves to the
		screenshotRoot folder.
	*/
	comparisonResultRoot: './tests/visual_tests/screenshots/results',
	
	/*
		Don't add count number to images. If set to false, a filename is
		required when capturing screenshots.
	*/
	addIteratorToImage: false,
	
	/*
		Don't add label to generated failure image
	*/
	addLabelToFailedImage: true,
	
	/*
		Mismatch tolerance defaults to  0.05%. Increasing this value
		will decrease test coverage
	*/
	mismatchTolerance: 0.05,
	
	/*
		Callbacks for your specific integration
	*/
	onFail: function(test){ console.log(test.filename, test.mismatch); },
	
	onPass: function(test){ console.log(test.filename); },
	
	/*
		Called when creating new baseline images
	*/
	onNewImage: function(){ console.log(test.filename); },
	
	onTimeout: function(){ console.log(test.filename); },
	
	onComplete: function(allTests, noOfFails, noOfErrors){
		allTests.forEach(function(test){
			if(test.fail){
				console.log(test.filename, test.mismatch);
			}
		});
	},
	
	onCaptureFail: function(ex, target) { console.log('Capture of ' + target + ' failed due to ' + ex.message); }
	
	/*
		Change the output screenshot filenames for your specific
		integration
	*/
	fileNameGetter: function(root,filename){
		// globally override output filename
		// files must exist under root
		// and use the .diff convention
		var name = root+'/somewhere/'+filename;
		if(fs.isFile(name+'.png')){
			return name+'.diff.png';
		} else {
			return name+'.png';
		}
	},
	
	/*
		Prefix the screenshot number to the filename, instead of suffixing it
	*/
	prefixCount: true,
	
	/*
		Output styles for image failure outputs generated by Resemble.js
	*/
	outputSettings: {
		errorColor: {
			red: 255,
			green: 255,
			blue: 0
		},
		errorType: 'movement',
		transparency: 0.3
	},
	
	/*
		Rebase is useful when you want to create new baseline
		images without manually deleting the files
		casperjs demo/test.js --rebase
	*/
	rebase: casper.cli.get("rebase"),
	
	/*
		If true, test will fail when captures fail (e.g. no element matching selector).
	 */
	failOnCaptureError: false
});

/*
	Turn off CSS transitions and jQuery animations
*/
phantomcss.turnOffAnimations();